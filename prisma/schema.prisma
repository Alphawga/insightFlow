// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  accounts      Account[]
  sessions      Session[]
  workspaces    UserWorkspace[]
  onboarding    OnboardingProgress[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Workspace {
  id          String    @id @default(cuid())
  name        String
  users       UserWorkspace[]
  adAccounts  AdAccount[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model UserWorkspace {
  id          String    @id @default(cuid())
  userId      String
  workspaceId String
  role        String    // OWNER, ADMIN, MEMBER
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, workspaceId])
}

model AdAccount {
  id          String    @id @default(cuid())
  workspaceId String
  platform    String    // GOOGLE_ADS, FACEBOOK_ADS, etc.
  accountId   String    // External platform account ID
  name        String
  status      String    // ACTIVE, DISCONNECTED
  credentials Json?     // Encrypted credentials
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  // New fields for Google Ads
  customerName String?  // Google Ads customer name
  developerToken String? // Google Ads developer token
  loginCustomerId String? // Manager account ID if applicable
  refreshToken String? @db.Text // OAuth refresh token
  conversionActions ConversionAction[]
  campaigns Campaign[]
  metrics AdMetrics[]
  alerts Alert[]
  lastSyncedAt DateTime?
  syncStatus String? // SYNCING, SUCCESS, ERROR
  syncError String? @db.Text
  
  @@unique([platform, accountId])
}

model ConversionAction {
  id            String    @id @default(cuid())
  adAccountId   String
  adAccount     AdAccount @relation(fields: [adAccountId], references: [id], onDelete: Cascade)
  externalId    String    // ID from Google Ads
  name          String
  category      String    // PURCHASE, SIGNUP, etc.
  status        String    // ENABLED, DISABLED
  isPrimary     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([adAccountId, externalId])
}

model OnboardingProgress {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  step        String    // WELCOME, WORKSPACE_SETUP, ADS_CONNECTION, etc.
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, step])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Campaign {
  id            String    @id @default(cuid())
  adAccountId   String
  adAccount     AdAccount @relation(fields: [adAccountId], references: [id], onDelete: Cascade)
  externalId    String    // Google Ads Campaign ID
  name          String
  status        String    // ENABLED, PAUSED, REMOVED
  budget        Float?
  budgetType    String?   // DAILY, LIFETIME
  startDate     DateTime?
  endDate       DateTime?
  metrics       AdMetrics[]
  deviceMetrics DeviceMetrics[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([adAccountId, externalId])
}

model AdMetrics {
  id            String    @id @default(cuid())
  adAccountId   String
  campaignId    String?
  date          DateTime
  impressions   Int
  clicks        Int
  cost          Float
  conversions   Int
  conversionValue Float
  ctr           Float    // Click-through rate
  cpc           Float    // Cost per click
  roas          Float    // Return on ad spend
  adAccount     AdAccount @relation(fields: [adAccountId], references: [id], onDelete: Cascade)
  campaign      Campaign? @relation(fields: [campaignId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([adAccountId, campaignId, date])
}

model DeviceMetrics {
  id            String    @id @default(cuid())
  campaignId    String
  campaign      Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  date          DateTime
  device        String    // DESKTOP, MOBILE, TABLET
  impressions   Int
  clicks        Int
  cost          Float
  conversions   Int
  conversionValue Float
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([campaignId, date, device])
}

model Alert {
  id            String    @id @default(cuid())
  adAccountId   String
  adAccount     AdAccount @relation(fields: [adAccountId], references: [id], onDelete: Cascade)
  metric        String    // CTR, CPC, ROAS, etc.
  condition     String    // LESS_THAN, GREATER_THAN, etc.
  threshold     Float
  enabled       Boolean   @default(true)
  emailEnabled  Boolean   @default(true)
  lastTriggered DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

